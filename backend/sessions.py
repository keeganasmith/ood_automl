# sessions.py (stubs; define later)
from typing import Any, Dict, Awaitable, Callable, Optional

class BaseSession:
    async def run_loop(self, ws): ...
    async def on_connect(self, ws): ...
    async def on_close(self, ws, exc: Optional[BaseException]): ...
    async def recv_json(self, ws) -> Dict[str, Any]: ...
    async def send_json(self, ws, payload: Dict[str, Any]) -> None: ...
    async def send_error(self, ws, detail: str, code: str = "bad_request") -> None: ...

class ModifyDatasetSession(BaseSession):
    def __init__(self):
        self.cursor = 0
        self.undo_stack = []
        self.df = None  # lazy-loaded

    async def dispatch(self, msg: Dict[str, Any]) -> Dict[str, Any]: ...
    async def load_dataset(self, path: str) -> Dict[str, Any]: ...
    async def view_rows(self, start: int, limit: int) -> Dict[str, Any]: ...
    async def view_problematic_rows(self, limit: int) -> Dict[str, Any]: ...
    async def change_rows(self, rows: list[dict]) -> Dict[str, Any]: ...
    async def replace_value(self, column: str, old: Any, new: Any, scope: str, row_indices=None) -> Dict[str, Any]: ...
    async def delete_columns(self, columns: list[str]) -> Dict[str, Any]: ...
    async def delete_rows(self, row_indices: list[int]) -> Dict[str, Any]: ...
    async def undo(self) -> Dict[str, Any]: ...
    async def save(self, path: str, overwrite: bool) -> Dict[str, Any]: ...
    async def coerce_type(self, column: str, to: str) -> Dict[str, Any]: ...

class RunControlSession(BaseSession):
    def __init__(self, job_runner):
        self.job_runner = job_runner
        self.run_id: Optional[str] = None

    async def dispatch(self, msg: Dict[str, Any]) -> Dict[str, Any]: ...
    async def start(self, cfg: Dict[str, Any]) -> Dict[str, Any]: ...
    async def pause(self) -> Dict[str, Any]: ...
    async def resume(self) -> Dict[str, Any]: ...
    async def restart(self) -> Dict[str, Any]: ...
    async def cancel(self) -> Dict[str, Any]: ...
    async def status(self) -> Dict[str, Any]: ...

class JobRunner:
    async def validate(self, cfg: Dict[str, Any]) -> tuple[bool, Optional[str]]: ...
    async def start(self, cfg: Dict[str, Any]) -> str: ...
    async def pause(self, run_id: str) -> None: ...
    async def resume(self, run_id: str) -> None: ...
    async def cancel(self, run_id: str) -> None: ...
    async def restart(self, run_id: str) -> str: ...
    async def status(self, run_id: str) -> Dict[str, Any]: ...
    async def stream_progress(self, run_id: str, emit: Callable[[Dict[str, Any]], Awaitable[None]]) -> None: ...
